name: Local Project Backup (self-hosted)

on:
  schedule:
    - cron: '0 20 * * *'        # daily @ 20:00 UTC (23:00 UTC+3)
  workflow_dispatch:

permissions:
  contents: write

# Top-level env: only plain strings allowed
env:
  PROJECT_DIR: 'D:\Uday_Documents\00_TechtangoRJS'
  BRANCH: 'backup'

jobs:
  backup:
    runs-on: [self-hosted, Windows, X64, Techtango-runner]
    defaults:
      run:
        shell: powershell

    steps:
      - name: Set temp paths
        run: |
          $ErrorActionPreference = 'Stop'
          echo "TMP_REPO=$env:RUNNER_TEMP\backuprepo" >> $env:GITHUB_ENV
          echo "TMP_STAGE=$env:RUNNER_TEMP\stage" >> $env:GITHUB_ENV

      - name: Prepare temp repo (local backup branch)
        run: |
          $ErrorActionPreference = 'Stop'

          if (Test-Path $env:TMP_REPO) { Remove-Item $env:TMP_REPO -Recurse -Force }
          New-Item -ItemType Directory -Path $env:TMP_REPO | Out-Null
          Set-Location $env:TMP_REPO
          git init

          # Authenticated remote using the workflow token
          git remote add origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"

          # Does the remote branch exist?
          $remote = git ls-remote --heads origin $env:BRANCH
          if ([string]::IsNullOrWhiteSpace($remote)) {
            Write-Host "No remote '$env:BRANCH' branch yet; creating fresh branch"
            git checkout -B $env:BRANCH
          } else {
            Write-Host "Remote '$env:BRANCH' branch found; fetching and basing on it"
            git fetch origin $env:BRANCH
            git checkout -B $env:BRANCH origin/$env:BRANCH
          }

      - name: Zip local project (exclude heavy/sensitive)
        run: |
          $ErrorActionPreference = 'Stop'
          $PSNativeCommandUseErrorActionPreference = $true
          $ProgressPreference = 'SilentlyContinue'
      
          if (-not (Test-Path $env:PROJECT_DIR)) {
            throw "PROJECT_DIR does not exist: $env:PROJECT_DIR"
          }
      
          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd-HHmm'UTC'")
          $file = "techtango-backup-$timestamp.zip"
          $dest = Join-Path $env:RUNNER_TEMP $file
      
          # fresh staging dir
          if (Test-Path $env:TMP_STAGE) { Remove-Item $env:TMP_STAGE -Recurse -Force }
          New-Item -ItemType Directory -Path $env:TMP_STAGE | Out-Null
      
          # Mirror to staging; exclude heavy/sensitive bits
          robocopy "$env:PROJECT_DIR" "$env:TMP_STAGE" /MIR /R:1 /W:1 `
            /XD node_modules .git client\build `
            /XF *.env *.log
          $rc = $LASTEXITCODE
      
          # Robocopy success codes: 0â€“7
          if ($rc -ge 8) { throw "Robocopy failed with exit code $rc" }
      
          if (Test-Path $dest) { Remove-Item $dest -Force }
      
          # Use tar to make a ZIP (more reliable than Compress-Archive for big/long trees)
          Push-Location $env:TMP_STAGE
          tar -a -c -f "$dest" .
          Pop-Location
      
          if (-not (Test-Path $dest)) {
            throw "Archive not created at $dest"
          }
      
          Copy-Item $dest (Join-Path $env:TMP_REPO $file)


      - name: Commit & push
        run: |
          $ErrorActionPreference = 'Stop'
          Set-Location $env:TMP_REPO
          git config user.name  "GitHub Actions (self-hosted)"
          git config user.email "actions@github.com"
          git add -A
      
          $changes = git diff --cached --name-only
          if ($changes) {
            $msg = "Backup: " + (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd-HHmmUTC")
            git commit -m $msg
            git push origin $env:BRANCH
          } else {
            Write-Host "Nothing to commit"
          }


      - name: Verify remote push & add summary
        run: |
          $ErrorActionPreference = 'Stop'
      
          Set-Location $env:TMP_REPO
      
          # Local commit SHA
          $local = git rev-parse $env:BRANCH
      
          # Remote commit SHA (after push)
          $remoteLine = git ls-remote --heads origin $env:BRANCH
          if ([string]::IsNullOrWhiteSpace($remoteLine)) {
            throw "Remote branch '$env:BRANCH' not found on origin"
          }
          $remote = ($remoteLine -split '\s+')[0]
      
          if ($local -ne $remote) {
            throw "Verification failed: local $local != remote $remote"
          }
      
          # Build a link to the branch on GitHub
          $branchUrl = "${{ github.server_url }}/${{ github.repository }}/tree/$env:BRANCH"
      
          # Optional: list the most recent backup file we added
          $latestZip = Get-ChildItem -Path . -Filter "techtango-backup-*.zip" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
      
          # Write a short summary to the run page
          @"
          âœ… Push verified.
          - Branch: $($env:BRANCH)
          - Commit: $local
          - Remote:  $remote
          - Branch URL: $branchUrl
          - Latest ZIP (local repo): $($latestZip.Name)
          "@ | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
          
              Write-Host "Push verified. View branch: $branchUrl"


      
      
      - name: Prune ZIPs older than 30 days
        run: |
          $ErrorActionPreference = 'Stop'
          Set-Location $env:TMP_REPO
          $old = Get-ChildItem -Filter "techtango-backup-*.zip" | Where-Object {
            $_.LastWriteTime -lt (Get-Date).AddDays(-30)
          }
          if ($old) {
            $old | Remove-Item -Force -ErrorAction SilentlyContinue
            git add -A
            $msg = "ðŸ§¹ Cleanup old zips: " + (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd-HHmmUTC")
            git commit -m $msg
            git push origin $env:BRANCH
          } else {
            Write-Host "No old zips to delete"
          }
