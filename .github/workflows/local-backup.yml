name: Local Project Backup (self-hosted)

on:
  schedule:
    - cron: '0 20 * * *'        # daily @ 20:00 UTC (23:00 UTC+3)
  workflow_dispatch:

permissions:
  contents: write

env:
  PROJECT_DIR: 'D:\Uday_Documents\00_TechtangoRJS'
  BRANCH: 'backup'

jobs:
  backup:
    runs-on: [self-hosted, Windows, X64, Techtango-runner]
    defaults:
      run:
        shell: powershell

    steps:
      - name: Prepare a clean temp repo for the backup branch
        run: |
          $ErrorActionPreference = 'Stop'
          $tmp   = Join-Path $env:RUNNER_TEMP 'backuprepo'
          if (Test-Path $tmp) { Remove-Item $tmp -Recurse -Force }
          New-Item -ItemType Directory -Path $tmp | Out-Null
          Set-Location $tmp
          git init
          git remote add origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          # No fetch needed; create/switch local branch. Remote branch will be created on first push.
          git checkout -B $env:BRANCH

      - name: Create ZIP of local project (exclude heavy/sensitive)
        run: |
          $ErrorActionPreference = 'Stop'
          $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd-HHmm'UTC'")
          $file = "techtango-backup-$timestamp.zip"
          $dest = Join-Path $env:RUNNER_TEMP $file
          $stage = Join-Path $env:RUNNER_TEMP 'stage'
          if (Test-Path $stage) { Remove-Item $stage -Recurse -Force }
          New-Item -ItemType Directory -Path $stage | Out-Null

          # Mirror project; ignore heavy/sensitive bits
          robocopy "$env:PROJECT_DIR" "$stage" /MIR /R:1 /W:1 `
            /XD node_modules .git client\build `
            /XF *.env *.log | Out-Null
          $rc = $LASTEXITCODE
          if ($rc -ge 8) { throw "Robocopy failed with exit code $rc" }

          if (Test-Path $dest) { Remove-Item $dest -Force }
          Compress-Archive -Path "$stage\*" -DestinationPath $dest -CompressionLevel Optimal
          Copy-Item $dest (Join-Path $tmp $file)

      - name: Commit & push
        run: |
          $ErrorActionPreference = 'Stop'
          $repo = Join-Path $env:RUNNER_TEMP 'backuprepo'
          Set-Location $repo
          git add -A

          # Commit only if there are staged changes
          $changes = git diff --cached --name-only
          if ($changes) {
            $msg = "ðŸ“¦ Backup: " + (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd-HHmmUTC")
            git commit -m $msg
          } else {
            Write-Host "Nothing to commit"
          }

          git push origin $env:BRANCH

      - name: Prune ZIPs older than 30 days
        run: |
          $ErrorActionPreference = 'Stop'
          $repo = Join-Path $env:RUNNER_TEMP 'backuprepo'
          Set-Location $repo

          $old = Get-ChildItem -Filter "techtango-backup-*.zip" |
                 Where-Object { $_.LastWriteTime -lt (Get-Date).AddDays(-30) }
          if ($old) {
            $old | Remove-Item -Force -ErrorAction SilentlyContinue
            git add -A
            $msg = "ðŸ§¹ Cleanup old zips: " + (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd-HHmmUTC")
            git commit -m $msg
            git push origin $env:BRANCH
          } else {
            Write-Host "No old zips to delete"
          }
